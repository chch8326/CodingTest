1. 다익스트라(데이크스트라) 최단 경로 알고리즘
  1) 그래프에서 여러 개의 노드가 있을 때, 특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘이다.
  2) 0보다 작은 값을 가지는 0의 음의 간선이 없을 때 정상적으로 동작한다.
  3) 다익스트라 최단 경로 알고리즘은 기본적으로 그리디 알고리즘으로 분류된다. 매번 가장 비용이 적은 노드를 선택해서 임의의 과정을 반복하기 때문이다.
  4) 최단 경로를 구하는 과정에서 각 노드에 대한 현재까지의 최단 거리 정보를 항상 1차원 리스트에 저장하며 리스트를 계속 갱신한다는 특징이 있다.
     이러한 1차원 리스트를 최단 거리 테이블이라 한다.
  5) 방문하지 않은 노드 중에서 현재 최단 거리가 가장 짧은 노드를 확인해 그 노드에 대하여 주변 간선을 다시 확인한 뒤 해당 노드를 거쳐 다른 노드로
     가는 비용을 계산하여 최단 거리 테이블을 갱신한다. (한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것)
  6) 단계마다 빙문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택하기 위해 매 단계마다 1차원 리스트의 모든 원소를 확인하는 순차 탐색이다.
     이때 처리할 데이터가 많을 시 우선순위 큐를 이용하면 시간 복잡도를 크게 줄일 수 있다. 우선순위 큐는 우선순위가 가장 높은 데이터를 가장 먼저
     삭제하는 것으로 현재 가장 가까운 노드를 저장하기 위한 목적으로 우선순위 큐를 이용하는 방식으로 대체할 수 있다. python의 라이브러리에서는 
     기본적으로 최소 힙 구조를 이용하는데 다익스트라 최단 경로 알고리즘에서는 비용이 적은 노드를 우선하여 방문하므로 최소 힙 구조를 기반으로 하는 
     python의 우손순위 큐 라이브러리를 그대로 사용하면 적합하다. 우선순위 큐에서 해당 노드를 이미 처리한 적이 있다면 무시하면 된다.
     
import heapq, sys

input = sys.stdin.readline
INF = int(1e9)

n, m = map(int, input().split()) # 노드의 개수, 간선의 개수
start = int(input()) # 시작 노드
graph = [[] for _ in range(n + 1)] # 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트
distance = [INF] * (n + 1) # 최단 거리 테이블 초기화

# 모든 간선 정보 입력
for _ in range(m):
	# a: a번 노드
    # b: b번 노드
    # c: a번 노드에서 b번 노드로 가는 비용
    a, b, c = map(int, input().split())
    graph[a].append((b, c))
    
def dijkstra(start):
	queue = []
	
	# 시작 노드로 가기 위한 최단 경로는 0으로 설정하여 큐에 삽입
	heapq.heappush(queue, (0, start))
	distance[start] = 0
	
	while queue:
		dist, now = heapq.heappop(queue) # 거리, 현재 노드
		
		# 현재 노드가 이미 처리된 적이 있는 노드라면 무시
		if distance[now] < dist:
			continue
			
		# 현재 노드와 연결된 다른 인접한 노드들을 확인
		for i in graph[now]:
			cost = dist + i[1]
			
			# 현재 노드를 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우
			if cost < distance[i[0]]:
				distance[i[0]] = cost
				heapq.heappush(queue, (cost, i[0]))
				
dijkstra(start)

for i in range(1, n + 1):
    # 도달할 수 없는 경우
    if distance[i] == INF:
        print('INFINITY')
    else:
        print(distance[i], end = ' ')
        
2. 플로이드 위셜 알고리즘
  1) 모든 지점에서 다른 모든 지점까지의 최단거리를 모두 구하는 알고리즘이다.
  2) 플로이드 위셜 알고리즘은 다이나믹 프로그래밍이라는 특징이 있다.
  3) 다익스트라 알고리즘처럼 단계마다 거쳐 가는 노드를 기준으로 알고리즘을 수행한다. 하지만 매번 방문하지 않은 노드 중에서 최단거리를 갖는 노드를 찾을 필요가 없다는 점이 다르다.
  4) 다익스트라 알고리즘과는 다르게 2차원 리스트에 최단거리 정보를 저장한다는 특징이 있다. 모든 노드에 대하여 다른 모든 노드로 가는 최단거리 정보를 담아야 하기 때문이다.
     그래서 2차원 리스트를 처리해야 하므로 N번의 단계에서 매번 O(N^2)의 시간이 소요된다.
  5) 각 단게어서는 해당 노드를 거쳐 가는 경우를 고려한다. 예를 들어 1번 노드에 대해서 확인할 때는 1번 노드를 중간에 거쳐 지나가는 모든 경우를 고려하면 된다.
     즉, 바로 이동하는 거리가 특정한 노드를 거쳐서 이동하는 거리보다 더 많은 비용을 가진다면 이를 더 짧은 것으로 갱신한다는 것이다.
  6) 알고리즘에서는 현재 확인하고 있는 노드를 제외하고, N - 1개의 노드 중에서 서로 다른 노드 (A, B) 쌍을 선택한다. 이후에 A번 노드 -> 1번 노드 -> B번 노드로
     가는 비용을 확인한 뒤에 최단거리를 갱신한다. 다시 말해 n-1P2 개의 쌍을 단계마다 반복해서 확인하면 된다. 이때 O(n-1P2)는 O(N^2)이라고 할 수 있기 때문에
     전체 시간 복잡도는 O(N^3)이다. 따라서 전체적으로 3중 반복문을 이용하여 이 점화식에 따라 최단거리 테이블을 갱신하면 된다.
  7) 점화식: Dab = min(Dab, Dak + Dkb)
  
import heapq, sys

input = sys.stdin.readline 
INF = int(1e9)

n, m = map(int, input().split()) # n: 노드의 개수 m: 간선의 개수
graph = [[INF] * (n + 1) for _ in range(n + 1)]

# 자기 자신에서 자기 자신으로 가는 거리 비용은 0으로 초기화
for a in range(1, n + 1):
	for b in range(1, n + 1):
		if a == b:
			graph[a][b] = 0
			
for _ in range(m):
	a, b, c = map(int, input().split())
	graph[a][b] = c # a번 노드에서 b번 노드로 가는 거리 비용은 c
	
# 플로이드 위셜 알고리즘 수행
for k in range(1, n + 1):
	for a in range(1, n + 1):
		for b in range(1, n + 1):
			graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])
			
for a in range(1, n + 1):
	for b in range(1, n + 1):
		# 도달할 수 없는 경우
		if graph[a][b] == INF:
			print('INFINITY', end = ' ')
		else:
			print(graph[a][b], end = ' ')
	
	print()