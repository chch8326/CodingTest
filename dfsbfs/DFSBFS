* 인접 행렬과 인접 리스트
1. 인접 행렬: 2차원 베열로 그래프의 연결 관계를 표현하는 방식으로, 2차원 배열에 각 노드가 연결된 형태를 기록한다.

INF = 999999999

graph = [
	[0, 7, 5],
	[7, 0, INF],
	[5, INF, 0]
]

2. 인접 리스트: 리스트로 그래프의 연결 관계를 표현하는 방식으로, 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장한다.

graph = [[] for _ in range(3)]

graph[0].appned((1, 7))
graph[0].appned((2, 5))

graph[1].appned((0, 7))

graph[2].appned((0, 5))

* 인접 행렬과 인접 리스트의 차이
인접 행렬과 인접 리스트는 DFS와 BFS 탐색을 구현하는데 사용되는데, 둘의 차이점은 메모리 측면에서 보면 
인접 행렬 방식은 모든 관계를 저장하므로 노드 개수가 많을 수록 메모리가 불필요하게 낭비된다.
반면에 인접 리스트 방식은 연결된 정보만을 저장하기 때문에 메모리를 효율적으로 사용한다. 하지만 이와 같은 속성 때문에
인접 리스트 방식은 인접 행렬 방식에 비해 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느리다.
인접 리스트 방식에서는 연결된 데이터를 하나씩 확인해야 하기 때문이다. 그러므로 특정한 노드와 연결된 모든 인접 노드를 순회해야 하는 경우,
인접 리스트 방식이 인접 행렬 방식에 비해 메모리 공간의 낭비가 적다.

1. DFS: 깊이 우선 탐색이라 부르며, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘
		최대한 멀리 있는 노드를 우선으로 탐색하는 방식으로 동작한다.
		모든 노드를 방문하고자 할 때, 미로 탐색 중 이동할 때마다 가중치가 붙거나 이동 과정에서 제약이 있는 경우 DFS를 사용
 1) 동작 원리: 스택
 2) 구현: 재귀 함수

def(graph, v, visited):
	visited[v] = True
	print(v, end = ' ')
	
	# 현재 노드와 연결된 다른 노드를 재귀적으로 방문
	for i in graph[v]:
		if not visited[i]:
			def(graph, i, visited)

visited = [False] * 9
dfs(graph, 1, visited)

2. BFS: 너비 우선 탐색이라 부르며, 가까운 노드부터 탐색하는 알고리즘
		미로 탐색 중 최단 거리, 최소 횟수를 구할 때 BFS를 사용한다.
 1) 동작 원리: 큐
 2) 구현 방법: 큐 자료구조

from collections import deque

def bfs(graph, start, visited)
	queue = deque([start])
	visited[start] = True
	
	# 큐가 빌 때까지 반복
	while queue:
		v = queue.popleft()
		print(v, end = ' ')
		
		for i in graph[v]:
			if not visited[i]:
				queue.append(i)
				visited[i] = True
				
visited = [False] * 9
dfs(graph, 1, visited)