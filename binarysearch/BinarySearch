이진 탐색
1. 이진 탐색의 개념
  1) 배열 내부의 데이터가 정렬되어 있어야만 사용할 수 있는 알고리즘으로 정렬되어 있다면 매우 빠르게 데이터를 찾울 수 있다는 특징이 있다.
  2) 이진 탐색에서는 위치를 나타내는 변수 3개를 사용하는데 탐색하고자 하는 범위의 시작점, 끝점과 시작점과 끝점을 더한 뒤 나눈 몫인 중간점이 있다.
  3) 이진 탐색은 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 알고리즘으로 찾으려는 데이터와 중간점 위치에 있는 데이터를 반복적으로 비교해서 원하는 데이터를 찾는 방법이다.
  4) 코딩 테스트의 이진 탐색 문제는 탐색 범위가 큰 상황에서의 탐색을 가정하는 문제가 많다. 따라서 탐색 범위가 2,000만을 넘어가면 이진 탐색으로 문제에 접근하는 것을 권한다.
  	 처리해야 할 데이터의 개수나 값이 1,000만 단위 이상으로 넘어가면 이진 탐색과 같이 O(logN)의 속도를 내야하는 알고리즘이 필요하다.
  
* 재귀 함수를 이용한 이진 탐색
def binary_search(arr, target, start, end):
	if start > end:
		return None
		
	mid = (start + end) // 2
	
	if arr[mid] == target:
		return mid
	elif arr[mid] < target:
		return binary_search(arr, target, start, mid - 1)
	else:
		return binary_search(arr, target, mid + 1, end)
		
* 반복문을 이용한 이진 탐색
def binary_search(arr, target, start, end):
	while start <= end:
		mid = (start + end) // 2
		
		if arr[mid] == target:
			return mid
		elif arr[mid] > target:
			end = mid - 1
		else:
			start = mid + 1
	
	return None

2. 이진 탐색 트리
  1) 이진 탐색이 동작할 수 있도록 고안된 효율적인 탐색이 가능한 자료구조이다.
  2) 이진 탐색 트리는 부모 노드보다 왼쪽 자식 노드가 작고, 부모 노드보다 오른쪽 자식 노드가 크다. (왼쪽 자식 노드 < 부모 노드 < 오른쪽 자식 노드)

3. 파라메트릭 서치
  1) 파라메트릭 서치란 최적화 문제를 결정 문제(예 혹은 아니오로 답하는 문제)로 바꾸어 해결하는 것을 말하는데,
     원하는 조건을 만족하는 가장 알맞은 값을 찾는 문제에 주로 파라메트릭 서치를 사용한다.
  2) 코딩 테스트나 프로그래밍 대회에서는 보통 파라메트릭 서치 유형을 만족 여부(예 혹은 아니오)에 따라서 탐색 범위를
     좁혀서 해결할 수 있는 이진 탐색을 이용하여 해결한다.  
     
4. 이진 탐색 라이브러리 bisect
  1) 정렬된 배열에서 특정한 원소를 찾아야 할 때 매우 효과적이다.
  2) bisect_left(배열, x): 정렬된 순서를 유지하면서 리스트 a에 데이터 x를 삽입할 가장 왼쪽 인덱스를 찾는 메소드
     bisect_right(배열, x): 정렬된 순서를 유지하면서 리스트 a에 데이터 x를 삽입할 가장 오른쪽 인덱스를 찾는 메소드
  3) bisect_left() 함수와 bisect_right() 함수는 정렬된 리스트에서 값이 특정 범위에 속하는 원소의 개수를 구하고자 할 때, 효과적으로 사용할 수 있다.

from bisect import bisect_left, bisect_right

a = [1, 2, 4, 4, 8]
x = 4

print(bisect_left(a, x)) -> 2
print(bisect_right(a, x)) -> 4

from bisect import bisect_left, bisect_right

def count_by_range(a, left_value, right_value):
	right_index = bisect_right(a, left_value, right_value)
	left_index = bisect_left(a, left_value, right_value)
	return right_index - left_index
	
a = [1, 2, 3, 3, 3, 3, 4, 4, 8, 9]

print(count_by_range(a, 4, 4)) -> 8 - 6 = 2
print(count_by_range(a, -1, 3)) -> 6 - 0 = 6

* 빠르게 입력 받기
입력 데이터의 개수가 많은 문제에 input() 함수를 사용하면 동작 속도가 느려서 시간 초과가 될 수 있다. 이처럼 입력 데이터가 많은 문제는
sys 라이브러리의 readline() 함수를 이용하면 시간 초과를 피할 수 있다.

import sys
input_data = sys.stdin.readline().rstrip()
print(input_data) # 입력받은 문자열을 출력