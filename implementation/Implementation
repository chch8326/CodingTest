완전 탐색
1. 모든 경우의 수를 모두 다 계산하여 문제를 해결하는 방법
2. 가능한 한 모든 경우의 수를 검사해보는 탐색 방법
3. 모든 경우의 수를 계산하기 때문에 비효율적인 시간 복잡도를 가져 데이터 개수가 큰 경우 정상적으로 동작하지 않을 수 있다.
   그래서 일반적으로 알고리즘 문제를 풀 때는 데이터의 개수가 100만개 이하일 때 완전 탐색 알고리즘을 사용하는 것이 적절하다.
4. 모든 경우의 수를 계산하기 때문에 반복문 혹은 재귀함수를 적절히 사용하며 예외 케이스를 모두 확인해야 하는 경우가 많다.
   그러므로 데이터가 많을 경우 일반적으로 DFS / BFS 알고리즘을 이용해서 문제를 해결한다.

시뮬레이션
1. 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행하여 문제를 해결하는 방법
2. 별도의 알고리즘이 필요하다기 보다는 문제에서 요구하는 동작 과정을 오류 없이 구현만 하면 된다.

* python에서 리스트의 크기
  데이터의 개수(리스트의 길이)	메모리 사용량
  1,000						약 4KB
  1,000,000					약 4MB
  10,000,000				약 40MB