다이나믹 프로그래밍: 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법

* 다이나믹 프로그래밍과 동적 할당의 다이나믹은 같은 의미인가?
  프로그래밍에서 다이나믹은 프로그램이 실행되는 도중에 라는 의미이다. 예를 들어 자료구조에서 동적 할당은 프로그램 실행 중에
  프로그램 실행에 필요한 메모리를 할당하는 기법이다. 하지만 다이나믹 프로그래밍에서의 다이나믹은 이런 의미가 아니다.

* 피보나치 함수 소스코드
def fibo(x):
	if x == 1 or x == 2:
		return 1
	
	return fibo(n - 1) + fibo(n - 2)
	
피보나치 수열의 소스코들을 이렇게 작성하면 심각한 문제가 생긴다. 바로 f(n) 함수에서 n이 커지면 커질수록 수행 시간이 기하급수적으로 늘어난다는 것이다.
이 소스코드는 동일한 함수가 반복적으로 호출되는데, 이미 한 번 계산을 했던 것도 계속 호출할 때마다 다시 계산이 되는 것이다. 즉, f(n)에서 n이 커지면
커질수록 반복해서 호출하는 수가 많아질 수 밖에 없다. 그래서 시간 복잡도도 O(2^n)이 된다.

이처럼 피보나치 수열의 점화식을 재귀 함수를 사용해 만들 수는 있지만 시간 복잡도가 매우 커지기 때문에 문제를 효율적으로 해결할 수 없다. 이러한 문제는 
다이나믹 프로그래밍을 사용하면 효율적으로 해결할 수 있다. 다만 항상 다이나믹 프로그래밍을 사용할 수는 없으며, 다음 조건을 만족할 때 사용할 수 있다.
	1. 큰 문제를 작은 문제로 나눌 수 있다.
	2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

2. 탑다운 방식(메모이제이션)
  1) 재귀 함수를 이용하여 다이나믹 프로그래밍 소스코드를 작성하는 방법을, 큰 문제를 해결하기 위해 작은 문제를 호출한다 하여 탑다운 방식이라 한다.
  2) 메모이제이션은 한 번 구한 결과를 리스트에 저장해두고 같은 식을 다시 호출하면 저장된 결과를 그대로 가져오는 기법이다. 즉, 다이나믹 프로그래밍을 
     재귀적으로 수행하다가 같은 정보가 필요할 때는 이미 구한 정답을 그대로 리스트에서 가져오기만 하면 된다.
  3) 메모이제이션은 탑다운 방식에 국한되어 사용되는 표현이다.

3. 보텀업 방식
  1) 반복문을 이용하여 소스코드를 작성하는 경우 작은 문제부터 답을 도출한다 하여 보텀업 방식이라고 한다.
  2) 재귀 함수를 사용하면 컴퓨터 시스템에서는 함수를 다시 호출했을 때 메모리 상에 적재되는 일련의 과정을 따라야 하므로 오버헤드가 발생할 수 있다.
     따라서 재귀 함수를 이용하는 탑다운 방식보다는 반복문을 사용하여 오버헤드를 줄일 수 있는 보텀업 방식으로 구현하는 것을 권장한다. 시스템 상
     재귀 함수의 스택 크기가 한정되어 있을 수 있기 때문이다. 또한 일반적으로 반복문을 이용한 다이나믹 프로그래밍이 더 성능이 좋다.
  3) 보텀업 방식에서 사용되는 결과 저장용 리스트는 DP 테이블이라고 한다.

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화  
d = [0] * 100
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수를 반복문으로 구현(보텀업 다이나믹 프로그래밍)
for i in range(3, n + 1):
	d[i] = d[i - 1] + d[i -2]
	
print(d[n])